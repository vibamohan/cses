#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Project {
    long long start, end, reward;
    bool operator<(const Project& other) const {
        return end < other.end;
    }
};

// generated by perplexity.ai
int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n;
    cin >> n;
    vector<Project> projects(n);
    for (int i = 0; i < n; ++i) {
        cin >> projects[i].start >> projects[i].end >> projects[i].reward;
    }

    sort(projects.begin(), projects.end());

    vector<long long> dp(n + 1, 0);
    vector<long long> ends(n);
    for (int i = 0; i < n; ++i) ends[i] = projects[i].end;

    for (int i = 1; i <= n; ++i) {
        // Option 1: skip current project
        dp[i] = dp[i - 1];

        // Option 2: take current project
        // Find last project that ends before projects[i-1].start
        int lo = 0, hi = i - 2, j = -1;
        while (lo <= hi) {
            int mid = (lo + hi) / 2;
            if (projects[mid].end < projects[i - 1].start) {
                j = mid;
                lo = mid + 1;
            } else {
                hi = mid - 1;
            }
        }
        long long rewardWithCurrent = projects[i - 1].reward;
        if (j != -1) rewardWithCurrent += dp[j + 1];
        dp[i] = max(dp[i], rewardWithCurrent);
    }

    cout << dp[n] << '\n';
    return 0;
}
